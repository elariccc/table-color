{"version":3,"sources":["components/table-input/table-input.jsx","components/table-form-data/table-form-data.jsx","functions/index.js","containers/table-editor/containers/table-form-row/table-form-row.jsx","containers/table-editor/components/table-data-editable/table-data-editable.jsx","containers/color-picker/components/table-color-data/table-color-data.jsx","containers/color-picker/color-picker.jsx","containers/table-editor/containers/table-row/table-row.jsx","containers/table-editor/table-editor.jsx","data/index.js","containers/app/app.jsx","index.js"],"names":["TableInput","value","handeInputChange","placeholder","type","step","min","max","onChange","TableFormData","obj","property","setObj","event","oldObj","newValues","target","deepClone","item","Array","isArray","map","element","clonedItem","hslToRgb","hsl","hue","saturationFraction","saturation","lightnessFraction","lightness","c","Math","abs","x","m","red","green","blue","round","decToHex","number","hexString","toString","length","emptyRow","name","color","TableFormRow","setTableData","useState","row","setRow","onClick","oldData","newData","splice","className","TableDataEditable","objIndex","newObj","TableColorData","rgb","setNewColorToTableData","modeIndex","newColorString","formatHex","createColorString","channel","newChannel","slice","ColorPicker","isMenuActive","setIsMenuActive","menuClasses","overlayClasses","isPickingColor","setIsPickingColor","currentHue","setCurrentHue","notConvertedRgb","colorString","indexOf","replace","parseInt","cuttedString","floor","parseFloat","stringValidation","isNaN","Object","assign","redFraction","greenFraction","blueFraction","minChannel","maxChannel","delta","rgbToHsl","pickStyle","backgroundColor","pointerStyle","left","top","fieldSaturationStyle","background","createSaturationGradientByHsl","setPickedColor","newSaturation","nativeEvent","offsetX","offsetWidth","newLightness","offsetY","offsetHeight","handleFieldStopPicking","Fragment","style","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","newHue","newModeIndex","modes","newHsl","toFixed","TableRow","index","draggedIndex","setDraggedIndex","isDraggedOver","setIsDraggedOver","parrentOfDraggedEl","useRef","tableRowClasses","ref","draggable","onDragStart","dataTransfer","setDragImage","document","createElement","onDragEnd","onDragOver","preventDefault","dropEffect","onDragLeave","onDrop","prevTableData","newTableData","TableEditor","tableData","DEFAULT_TABLE_DATA","LOCAL_STORAGE_KEY","App","JSON","parse","window","localStorage","getItem","useEffect","setItem","stringify","ReactDOM","render","StrictMode","getElementById"],"mappings":"6RAAe,SAASA,EAAT,GAA8F,IAAxEC,EAAuE,EAAvEA,MAAOC,EAAgE,EAAhEA,iBAAkBC,EAA8C,EAA9CA,YAA8C,IAAjCC,YAAiC,MAA1B,OAA0B,EAAlBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,IAAKC,EAAO,EAAPA,IACnG,OACE,6BACE,uBACEH,KAAMA,EACNH,MAAOA,EACPO,SAAUN,EACVC,YAAaA,EACbE,KAAMA,EACNC,IAAKA,EACLC,IAAKA,MCRE,SAASE,EAAT,GAAgE,IAAvCC,EAAsC,EAAtCA,IAAKC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,OAAQT,EAAe,EAAfA,YAW7D,OACE,cAACH,EAAD,CACEC,MAAOS,EAAIC,GACXT,iBAbqB,SAAAW,GACvBD,GACE,SAAAE,GACE,IAAMC,EAAS,eAAMJ,EAAWE,EAAMG,OAAOf,OAE7C,OAAO,2BAAIa,GAAWC,OASxBZ,YAAaA,ICjBZ,SAASc,EAAUC,GACxB,GAAIC,MAAMC,QAAQF,GAAO,OAAOA,EAAKG,KAAI,SAAAC,GAAO,OAAIL,EAAUK,MAE9D,GAAoB,kBAATJ,EAAmB,CAC5B,IAAMK,EAAa,GAEnB,IAAK,IAAMZ,KAAYO,EACrBK,EAAWZ,GAAYM,EAAUC,EAAKP,IAGxC,OAAOY,EAGT,OAAOL,EAyCF,SAASM,EAASC,GACvB,IAAMC,EAAMD,EAAIC,IACVC,EAAqBF,EAAIG,WAAa,IACtCC,EAAoBJ,EAAIK,UAAY,IAEpCC,GAAM,EAAIC,KAAKC,IAAI,EAAIJ,EAAoB,IAAOF,EAClDO,EAAIH,GAAM,EAAIC,KAAKC,IAAKP,EAAM,GAAM,EAAI,IACxCS,EAAIN,EAAoBE,EAAI,EAC9BK,EAAM,EACNC,EAAQ,EACRC,EAAO,EAmBX,OAjBI,GAAKZ,GAAOA,EAAM,IACpBU,EAAML,EAAGM,EAAQH,EAAGI,EAAO,GAClB,IAAMZ,GAAOA,EAAM,KAC5BU,EAAMF,EAAGG,EAAQN,EAAGO,EAAO,GAClB,KAAOZ,GAAOA,EAAM,KAC7BU,EAAM,EAAGC,EAAQN,EAAGO,EAAOJ,GAClB,KAAOR,GAAOA,EAAM,KAC7BU,EAAM,EAAGC,EAAQH,EAAGI,EAAOP,GAClB,KAAOL,GAAOA,EAAM,KAC7BU,EAAMF,EAAGG,EAAQ,EAAGC,EAAOP,GAClB,KAAOL,GAAOA,EAAM,MAC7BU,EAAML,EAAGM,EAAQ,EAAGC,EAAOJ,GAMtB,CACLE,IAJFA,EAAMJ,KAAKO,MAAmB,KAAXH,EAAMD,IAKvBE,MAJFA,EAAQL,KAAKO,MAAqB,KAAbF,EAAQF,IAK3BG,KAJFA,EAAON,KAAKO,MAAoB,KAAZD,EAAOH,KAQtB,SAASK,EAASC,GACvB,IAAIC,EAAYD,EAAOE,SAAS,IAIhC,OAHID,EAAUE,OAAS,IACrBF,EAAY,IAAMA,GAEbA,E,UCvFHG,EAAW,CACfC,KAAM,GACN1C,KAAM,GACN2C,MAAO,IAGM,SAASC,EAAT,GAAyC,IAAjBC,EAAgB,EAAhBA,aAAgB,EAC7BC,mBAASL,GADoB,mBAC7CM,EAD6C,KACxCC,EADwC,KAiBrD,OACE,+BACE,uBACA,cAAC3C,EAAD,CACEC,IAAKyC,EACLxC,SAAS,OACTC,OAAQwC,EACRjD,YAAY,iBAEd,cAACM,EAAD,CACEC,IAAKyC,EACLxC,SAAS,OACTC,OAAQwC,EACRjD,YAAY,iBAEd,cAACM,EAAD,CACEC,IAAKyC,EACLxC,SAAS,QACTC,OAAQwC,EACRjD,YAAY,kBAEd,oBACEkD,QApCoB,WACxBJ,GACE,SAAAK,GACE,IAAMC,EAAUtC,EAAUqC,GAI1B,OAFAC,EAAQC,OAAO,EAAG,EAAlB,eAAyBL,IAElBI,KAIXH,EAAOP,IA0BHY,UAAU,8BAFZ,uBChDS,SAASC,EAAT,GAAuE,IAA1ChD,EAAyC,EAAzCA,IAAKC,EAAoC,EAApCA,SAAUgD,EAA0B,EAA1BA,SAAUV,EAAgB,EAAhBA,aAgBnE,OACE,cAACjD,EAAD,CACEC,MAAOS,EAAIC,GACXT,iBAlBqB,SAAAW,GACvBoC,GACE,SAAAK,GACE,IAAMxC,EAASwC,EAAQK,GACjB5C,EAAS,eAAMJ,EAAWE,EAAMG,OAAOf,OACvC2D,EAAM,2BAAO9C,GAAWC,GAExBwC,EAAUtC,EAAUqC,GAG1B,OAFAC,EAAQC,OAAOG,EAAU,EAAGC,GAErBL,QCbA,SAASM,EAAT,GAAoG,IAA1EC,EAAyE,EAAzEA,IAAKf,EAAoE,EAApEA,MAA0CgB,GAA0B,EAA7Dd,aAA6D,EAA/CU,SAA+C,EAArCK,UAAqC,EAA1BD,wBAUtF,OACE,cAAC/D,EAAD,CACEC,MAAO6D,EAAIf,GACX7C,iBAZqB,SAAAW,GACvB,IAIMoD,EAYV,SAA2BH,GACzB,OAAsB,IAAlBA,EAAIE,UACA,IAAN,OAAWE,EAAUJ,EAAI1B,MAAzB,OAAgC8B,EAAUJ,EAAIzB,QAA9C,OAAuD6B,EAAUJ,EAAIxB,OAC5C,IAAlBwB,EAAIE,UACL,OAAN,OAAcF,EAAI1B,IAAlB,aAA0B0B,EAAIzB,MAA9B,aAAwCyB,EAAIxB,KAA5C,KAEA,eAAewB,EAAI1B,IAAnB,aAA2B0B,EAAIzB,MAA/B,aAAyCyB,EAAIxB,KAA7C,KAlBuB6B,CAJX,2BACPL,GADO,eAEJf,EAAQlC,EAAMG,OAAOf,SAG7B8D,EAAuBE,MAoB3B,SAASC,EAAUE,GACjB,IAAIC,EAAaD,EAIjB,OAHuB,IAAnBA,EAAQxB,SAAcyB,EAAa,KAAOA,GACvB,IAAnBD,EAAQxB,SAAcyB,EAAa,IAAMA,GACzCD,EAAQxB,OAAS,IAAGyB,EAAaA,EAAWC,MAAM,EAAG,IAClDD,E,MC1BM,SAASE,EAAT,GAAuD,IAAhC7D,EAA+B,EAA/BA,IAAKiD,EAA0B,EAA1BA,SAAUV,EAAgB,EAAhBA,aAAgB,EACzBC,oBAAS,GADgB,mBAC3DsB,EAD2D,KAC7CC,EAD6C,KAE/DC,EAAc,qBACdC,EAAiB,wBACjBH,IACFE,GAAe,8BACfC,GAAkB,kCAN+C,MASrBzB,oBAAS,GATY,mBAS3D0B,EAT2D,KAS3CC,EAT2C,OAU7B3B,mBAAS,GAVoB,mBAU3D4B,EAV2D,KAU/CC,EAV+C,KAW/Df,EAAY,KAEVF,EAAM,GACNkB,EAAkB,GAClBC,EAAcvE,EAAIqC,MAexB,GAbiC,IAA7BkC,EAAYC,QAAQ,MAAcD,EAAYrC,QAAU,IAC1DoB,EAAY,EACZgB,EAAgBhB,UAAYA,EAE5BgB,EAAgB5C,IAAM6C,EAAYX,MAAM,EAAG,GAAGa,QAAQ,MAAO,IAC7DH,EAAgB3C,MAAQ4C,EAAYX,MAAM,EAAG,GAAGa,QAAQ,MAAO,IAC/DH,EAAgB1C,KAAO2C,EAAYX,MAAM,EAAG,GAAGa,QAAQ,MAAO,IAE9DrB,EAAI1B,IAAMgD,SAAUJ,EAAgB5C,IAA6B4C,EAAgB5C,KAAtC4C,EAAgB5C,IAA2B,IACtF0B,EAAIzB,MAAQ+C,SAAUJ,EAAgB3C,MAAiC2C,EAAgB3C,OAAxC2C,EAAgB3C,MAA+B,IAC9FyB,EAAIxB,KAAO8C,SAAUJ,EAAgB1C,KAA+B0C,EAAgB1C,MAAvC0C,EAAgB1C,KAA6B,KAGxD,IAAhC2C,EAAYC,QAAQ,QAAe,CACrClB,EAAY,EACZgB,EAAgBhB,UAAYA,EAE5B,IAAIqB,EAAeJ,EAAYX,MAAM,GACrCU,EAAgB5C,IAAMiD,EAAaf,MAAM,EAAGe,EAAaH,QAAQ,MAAMC,QAAQ,MAAO,IAEtFE,EAAeA,EAAaf,MAAMe,EAAaH,QAAQ,KAAO,GAC9DF,EAAgB3C,MAAQgD,EAAaf,MAAM,EAAGe,EAAaH,QAAQ,MAAMC,QAAQ,MAAO,IAExFE,EAAeA,EAAaf,MAAMe,EAAaH,QAAQ,KAAO,GAC9DF,EAAgB1C,KAAO+C,EAAaf,MAAM,EAAGe,EAAaH,QAAQ,MAAMC,QAAQ,MAAO,IAEvFrB,EAAI1B,IAAMgD,SAAUJ,EAAgB5C,IAA6B4C,EAAgB5C,KAAtC4C,EAAgB5C,KAC3D0B,EAAIzB,MAAQ+C,SAAUJ,EAAgB3C,MAAiC2C,EAAgB3C,OAAxC2C,EAAgB3C,OAC/DyB,EAAIxB,KAAO8C,SAAUJ,EAAgB1C,KAA+B0C,EAAgB1C,MAAvC0C,EAAgB1C,MAG/D,GAAqC,IAAjC2C,EAAYC,QAAQ,SAAgB,CACtClB,EAAY,EACZgB,EAAgBhB,UAAYA,EAE5B,IAAIqB,EAAeJ,EAAYX,MAAM,GACrCU,EAAgB5C,IAAMiD,EAAaf,MAAM,EAAGe,EAAaH,QAAQ,MAAMC,QAAQ,MAAO,IAEtFE,EAAeA,EAAaf,MAAMe,EAAaH,QAAQ,KAAO,GAC9DF,EAAgB3C,MAAQgD,EAAaf,MAAM,EAAGe,EAAaH,QAAQ,MAAMC,QAAQ,MAAO,IAExFE,EAAeA,EAAaf,MAAMe,EAAaH,QAAQ,KAAO,GAC9DF,EAAgB1C,KAAO+C,EAAaf,MAAM,EAAGe,EAAaH,QAAQ,MAAMC,QAAQ,MAAO,IAEvFrB,EAAI1B,IAAMJ,KAAKsD,MAAuF,IAAhFC,WAAYP,EAAgB5C,IAA6B4C,EAAgB5C,KAAtC4C,EAAgB5C,MACzE0B,EAAIzB,MAAQL,KAAKsD,MAA6F,IAAtFC,WAAYP,EAAgB3C,MAAiC2C,EAAgB3C,OAAxC2C,EAAgB3C,QAC7EyB,EAAIxB,KAAON,KAAKsD,MAA0F,IAAnFC,WAAYP,EAAgB1C,KAA+B0C,EAAgB1C,MAAvC0C,EAAgB1C,OAG7E,IAAMkD,EAEY,OAAdxB,GACAF,EAAI1B,KAAO,GAAK0B,EAAI1B,KAAO,MAAQqD,MAAM3B,EAAI1B,MAC7C0B,EAAIzB,OAAS,GAAKyB,EAAIzB,OAAS,MAAQoD,MAAM3B,EAAIzB,QACjDyB,EAAIxB,MAAQ,GAAKwB,EAAIxB,MAAQ,MAAQmD,MAAM3B,EAAIxB,MAI9CkD,IACHxB,EAAY,EACZ0B,OAAOC,OAAO7B,EAAK,CAAC1B,IAAK,IAAKC,MAAO,EAAGC,KAAM,IAC9CoD,OAAOC,OAAOX,EAAiBlB,EAAK,CAAEE,UAAWA,KAGnD,IAAMvC,EJzED,SAAkBqC,GAAsB,IASzCpC,EAAKE,EAAYE,EATOgD,EAAgB,uDAAH,EACnCc,EAAc9B,EAAI1B,IAAM,IACxByD,EAAgB/B,EAAIzB,MAAQ,IAC5ByD,EAAehC,EAAIxB,KAAO,IAE1ByD,EAAa/D,KAAK1B,IAAIsF,EAAaC,EAAeC,GAClDE,EAAahE,KAAKzB,IAAIqF,EAAaC,EAAeC,GAClDG,EAAQD,EAAaD,EAwB3B,OAnBErE,EADa,IAAVuE,EACGnB,EAAa,GACZkB,IAAeJ,GACbC,EAAgBC,GAAgBG,EAAU,EAC5CD,IAAeH,GACfC,EAAeF,GAAeK,EAAQ,GAEtCL,EAAcC,GAAiBI,EAAQ,GAEhDvE,GAAY,IAEF,IAAGA,GAAO,KAEpBI,GAAakE,EAAaD,GAAc,EAExCnE,EAAuB,IAAVqE,EAAc,EAAIA,GAAU,EAAIjE,KAAKC,IAAI,EAAIH,EAAY,IAK/D,CACLJ,IAAKA,EACLE,WALFA,GAA0B,IAMxBE,UALFA,GAAwB,KI4CZoE,CAASpC,EAAKgB,GAEpBqB,EACJX,EACE,CACEY,gBAAiBjC,EAAkBL,IAErC,KAGEuC,EAAe,CACnBC,KAAK,GAAD,OAAK7E,EAAIG,WAAT,KACJ2E,IAAI,GAAD,SAAO9E,EAAIK,UAAYL,EAAIG,WAAa,EAAI,MAAQ,EAAIH,EAAIG,WAAa,KAAzE,MAGC4E,EAAuB,CAC3BC,WAAaC,EAA8BjF,IAGvCsC,EAAyB,SAAAE,GAC7BhB,GACE,SAAAK,GACE,IAAMxC,EAASwC,EAAQK,GAEjB5C,EAAY,CAAEgC,MAAOkB,GACrBL,EAAM,2BAAO9C,GAAWC,GAExBwC,EAAUtC,EAAUqC,GAG1B,OAFAC,EAAQC,OAAOG,EAAU,EAAGC,GAErBL,MAmBPoD,EAAiB,SAAA9F,GACrB,IAAM+F,EAAgB/F,EAAMgG,YAAYC,QAAUjG,EAAMG,OAAO+F,YAAc,IACvEC,GAAgB,GAAkE,IAA5D,EAAInG,EAAMgG,YAAYC,QAAUjG,EAAMG,OAAO+F,eAAsB,EAAIlG,EAAMgG,YAAYI,QAAUpG,EAAMG,OAAOkG,cAStIjD,EAAiBE,EADR3C,EANA,CACbE,IAAKD,EAAIC,IACTE,WAAYgF,EACZ9E,UAAWkF,IAIoChD,GACjDD,EAAuBE,IAYnBkD,EAAyB,SAAAtG,GAC7BgE,GAAkB,IASpB,OACE,eAAC,IAAMuC,SAAP,WACE,qBACE3D,UAAWkB,EACXtB,QAAS,kBAAMoB,GAAgB,MAEjC,sBAAKhB,UAAU,eAAf,UACE,wBACEA,UAAU,qBACV4D,MAAOlB,EACP9C,QAAS,kBAAMoB,GAAgB,MAEjC,sBAAKhB,UAAWiB,EAAhB,UACE,sBACEjB,UAAU,iCACV4D,MAAOb,EACPc,YAnCmB,SAAAzG,GAC3BgE,GAAkB,GAClB8B,EAAe9F,IAkCP0G,YA/BmB,SAAA1G,GACvB+D,GAAgB+B,EAAe9F,IA+B3B2G,UAAWL,EACXM,aAAcN,EANhB,UAQE,qBACE1D,UAAU,kCAEZ,qBACEA,UAAU,wBACV4D,MAAOhB,OAGX,uBACE5C,UAAU,0BACVrD,KAAK,QACLE,IAAI,IACJC,IAAI,MACJF,KAAK,MACLG,SAnFgB,SAAAK,GACxB,IAAM6G,GAAU7G,EAAMG,OAAOf,MAE7B8E,EAAc2C,GACd,IAMMzD,EAAiBE,EADR3C,EALH,2BACPC,GACA,CAAEC,IAAKgG,KAIqC1D,GACjDD,EAAuBE,IAyEfhE,MAAOwB,EAAIC,MAEb,kCACE,gCACE,+BACE,mCAGA,mCAGA,wCAKJ,gCACE,+BACE,cAACmC,EAAD,CACEC,IAAKkB,EACLjC,MAAM,MACNE,aAAcA,EACdU,SAAUA,EACVK,UAAWA,EACXD,uBAAwBA,IAE1B,cAACF,EAAD,CACEC,IAAKkB,EACLjC,MAAM,QACNE,aAAcA,EACdU,SAAUA,EACVK,UAAWA,EACXD,uBAAwBA,IAE1B,cAACF,EAAD,CACEC,IAAKkB,EACLjC,MAAM,OACNE,aAAcA,EACdU,SAAUA,EACVK,UAAWA,EACXD,uBAAwBA,YAKhC,wBACEN,UAAU,qBACVJ,QAzFc,WACtB,IAAMsE,EAAe3D,EAAY4D,EAAMhF,OAAS,EAAKoB,EAAY,EAAK,EAChEC,EAAiBE,EAAkBL,EAAK6D,GAC9C5D,EAAuBE,IAuFf7D,KAAK,SAHP,SAKGwH,EAAM5D,cAQnB,IAAM4D,EAAQ,CAAC,MAAO,MAAO,QAE7B,SAASlB,EAA8BjF,GACrC,IAAMoG,EAAM,2BACPpG,GACA,CACDG,WAAY,IACZE,UAAW,KAIf,MAAM,sCAAN,OAA6CqC,EAAkB3C,EAASqG,IAAxE,KAGF,SAAS1D,EAAkBL,GAAqB,IAAhBE,EAAe,uDAAH,EAC1C,OAAkB,IAAdA,EACI,IAAN,OAAWxB,EAASsB,EAAI1B,MAAxB,OAA+BI,EAASsB,EAAIzB,QAA5C,OAAqDG,EAASsB,EAAIxB,OAC7C,IAAd0B,EACD,OAAN,OAAcF,EAAI1B,IAAlB,aAA0B0B,EAAIzB,MAA9B,aAAwCyB,EAAIxB,KAA5C,KAEA,gBAAgBwB,EAAI1B,IAAM,KAAK0F,QAAQ,GAAvC,cAA+ChE,EAAIzB,MAAQ,KAAKyF,QAAQ,GAAxE,cAAgFhE,EAAIxB,KAAO,KAAKwF,QAAQ,GAAxG,K,MCrRW,SAASC,EAAT,GAAgF,IAA5D5E,EAA2D,EAA3DA,IAAK6E,EAAsD,EAAtDA,MAAO/E,EAA+C,EAA/CA,aAAcgF,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,gBAAmB,EAChDhF,oBAAS,GADuC,mBACpFiF,EADoF,KACrEC,EADqE,KAEtFC,EAAqBC,iBAAO,MAE9BC,EAAkB,YACtBA,GAAqBP,IAAUC,EAAiB,sBAAwB,GACxEM,GACEJ,EAEMH,EAAQC,EACR,+BAEA,kCAEJ,GAoDJ,OACE,qBACExE,UAAW8E,EACXC,IAAKH,EAFP,UAIE,oBACE5E,UAAU,uBACVgF,WAAS,EACTC,YAzDkB,SAAA7H,GACtBqH,EAAgBF,GAEhBnH,EAAM8H,aAAaC,aACjBC,SAASC,cAAc,OACvB,EACA,IAoDEC,UAhDgB,SAAAlI,GACpBqH,EAAgB,OAgDZc,WA7CiB,SAAAnI,GACrBA,EAAMoI,iBACNpI,EAAM8H,aAAaO,WAAa,OAE5BlB,IAAUC,GAAcG,GAAiB,IA0CzCe,YAvCkB,SAAAtI,GAClBmH,IAAUC,GAAcG,GAAiB,IAuCzCgB,OApCa,SAAAvI,GACjBuH,GAAiB,GAEbJ,IAAUC,GAAchF,GAC1B,SAAAoG,GACE,IAAMC,EAAerI,EAAUoI,GAG/B,OAFAC,EAAa9F,OAAOwE,EAAO,EAAGsB,EAAa9F,OAAOyE,EAAc,GAAG,IAE5DqB,MAqBT,kBASA,cAAC5F,EAAD,CACEhD,IAAKyC,EACLxC,SAAS,OACTgD,SAAUqE,EACV/E,aAAcA,IAEhB,cAACS,EAAD,CACEhD,IAAKyC,EACLxC,SAAS,OACTgD,SAAUqE,EACV/E,aAAcA,IAEhB,cAACS,EAAD,CACEhD,IAAKyC,EACLxC,SAAS,QACTgD,SAAUqE,EACV/E,aAAcA,IAEhB,6BACE,cAACsB,EAAD,CACE7D,IAAKyC,EACLQ,SAAUqE,EACV/E,aAAcA,MAGlB,oBACEI,QAnDoB,WACxBJ,GACE,SAAAK,GACE,IAAMC,EAAUtC,EAAUqC,GAG1B,OAFAC,EAAQC,OAAOwE,EAAO,GAEfzE,MA8CPE,UAAU,yBAFZ,uB,MC3GS,SAAS8F,EAAT,GAAiD,IAA3BC,EAA0B,EAA1BA,UAAWvG,EAAe,EAAfA,aAAe,EACnBC,mBAAS,MADU,mBACrD+E,EADqD,KACvCC,EADuC,KAG7D,OACE,wBAAOzE,UAAU,eAAjB,UACE,gCACE,+BACE,uBACA,sCAGA,sCAGA,uCAGA,4BAGJ,kCACE,cAACT,EAAD,CAAcC,aAAcA,IAC3BuG,EAAYA,EAAUnI,KACrB,SAAC8B,EAAK6E,GAAN,OACE,cAACD,EAAD,CAEE5E,IAAKA,EACL6E,MAAOA,EACP/E,aAAcA,EACdgF,aAAcA,EACdC,gBAAiBA,GALZF,MAQP,WCxCL,IAAMyB,EAAqB,CAChC,CACE3G,KAAM,QACN1C,KAAM,OACN2C,MAAO,WAET,CACED,KAAM,QACN1C,KAAM,OACN2C,MAAO,YAIE2G,EAAoB,Y,MCJlB,SAASC,IAAO,IAAD,EACQzG,mBAAS0G,KAAKC,MAAMC,OAAOC,aAAaC,QAAQN,KADxD,mBACpBF,EADoB,KACTvG,EADS,KAI5BgH,qBACE,WACEH,OAAOC,aAAaG,QAClBR,EACAE,KAAKO,UAAUX,MAGnB,CAACA,IAOH,OACE,eAAC,IAAMpC,SAAP,WACE,wBAAQhH,KAAK,SAASiD,QANE,WAC1BJ,EAAahC,EAAUwI,KAKrB,oCAGA,cAACF,EAAD,CACEC,UAAWA,EACXvG,aAAcA,OC7BtBmH,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACX,EAAD,MAEFd,SAAS0B,eAAe,W","file":"static/js/main.71d92788.chunk.js","sourcesContent":["export default function TableInput({ value, handeInputChange, placeholder, type = 'text', step, min, max }) {\r\n  return (\r\n    <td>\r\n      <input \r\n        type={type} \r\n        value={value}\r\n        onChange={handeInputChange}\r\n        placeholder={placeholder}\r\n        step={step}\r\n        min={min}\r\n        max={max}\r\n      />\r\n    </td>\r\n  );\r\n}","import TableInput from '../table-input';\r\n\r\nexport default function TableFormData({ obj, property, setObj, placeholder }) {\r\n  const handeInputChange = event => {\r\n    setObj(\r\n      oldObj => {\r\n        const newValues = { [property]: event.target.value };\r\n\r\n        return {...oldObj, ...newValues};\r\n      }\r\n    );\r\n  }\r\n\r\n  return (\r\n    <TableInput\r\n      value={obj[property]}\r\n      handeInputChange={handeInputChange}\r\n      placeholder={placeholder}\r\n    />\r\n  );\r\n}","export function deepClone(item) {\r\n  if (Array.isArray(item)) return item.map(element => deepClone(element));\r\n  \r\n  if (typeof item === 'object') {\r\n    const clonedItem = {};\r\n\r\n    for (const property in item) {\r\n      clonedItem[property] = deepClone(item[property]);\r\n    }\r\n\r\n    return clonedItem;\r\n  }\r\n\r\n  return item;\r\n}\r\n\r\nexport function rgbToHsl(rgb, currentHue = 0) {\r\n  const redFraction = rgb.red / 255;\r\n  const greenFraction = rgb.green / 255;\r\n  const blueFraction = rgb.blue / 255;\r\n\r\n  const minChannel = Math.min(redFraction, greenFraction, blueFraction);\r\n  const maxChannel = Math.max(redFraction, greenFraction, blueFraction);\r\n  const delta = maxChannel - minChannel;\r\n\r\n  let hue, saturation, lightness;\r\n\r\n  if ( delta === 0 ) \r\n    hue = currentHue / 60;\r\n  else if (maxChannel === redFraction) \r\n    hue = ( (greenFraction - blueFraction) / delta ) % 6;\r\n  else if (maxChannel === greenFraction)\r\n    hue = (blueFraction - redFraction) / delta + 2;\r\n  else\r\n    hue = (redFraction - greenFraction) / delta + 4;\r\n\r\n  hue = hue * 60;\r\n\r\n  if (hue < 0) hue += 360;\r\n\r\n  lightness = (maxChannel + minChannel) / 2;\r\n\r\n  saturation = delta === 0 ? 0 : delta / ( 1 - Math.abs(2 * lightness - 1) );\r\n\r\n  saturation = saturation * 100;\r\n  lightness = lightness * 100;\r\n\r\n  return { \r\n    hue: hue, \r\n    saturation: saturation, \r\n    lightness: lightness\r\n  }\r\n}\r\n\r\nexport function hslToRgb(hsl) {\r\n  const hue = hsl.hue;\r\n  const saturationFraction = hsl.saturation / 100;\r\n  const lightnessFraction = hsl.lightness / 100;\r\n\r\n  const c = ( 1 - Math.abs(2 * lightnessFraction - 1) ) * saturationFraction;\r\n  const x = c * ( 1 - Math.abs((hue / 60) % 2 - 1) );\r\n  const m = lightnessFraction - c / 2;\r\n  let red = 0;\r\n  let green = 0;\r\n  let blue = 0;\r\n\r\n  if (0 <= hue && hue < 60) {\r\n    red = c; green = x; blue = 0;\r\n  } else if (60 <= hue && hue < 120) {\r\n    red = x; green = c; blue = 0;\r\n  } else if (120 <= hue && hue < 180) {\r\n    red = 0; green = c; blue = x;\r\n  } else if (180 <= hue && hue < 240) {\r\n    red = 0; green = x; blue = c;\r\n  } else if (240 <= hue && hue < 300) {\r\n    red = x; green = 0; blue = c;\r\n  } else if (300 <= hue && hue < 360) {\r\n    red = c; green = 0; blue = x;\r\n  }\r\n\r\n  red = Math.round( (red + m) * 255 );\r\n  green = Math.round( (green + m) * 255 );\r\n  blue = Math.round( (blue + m) * 255 );\r\n  return {\r\n    red: red,\r\n    green: green,\r\n    blue: blue\r\n  }\r\n}\r\n\r\nexport function decToHex(number) {\r\n  let hexString = number.toString(16);\r\n  if (hexString.length % 2) {\r\n    hexString = '0' + hexString;\r\n  }\r\n  return hexString;\r\n}","import { useState } from 'react';\r\n\r\nimport TableFormData from '../../../../components/table-form-data';\r\n\r\nimport { deepClone } from '../../../../functions';\r\n\r\nimport './table-form-row.css';\r\n\r\nconst emptyRow = {\r\n  name: '',\r\n  type: '',\r\n  color: ''\r\n};\r\n\r\nexport default function TableFormRow({ setTableData }) {\r\n  const [ row, setRow ] = useState(emptyRow);\r\n\r\n  const handleInsertClick = () => {\r\n    setTableData(\r\n      oldData => {\r\n        const newData = deepClone(oldData);\r\n        \r\n        newData.splice(0, 0, {...row});\r\n\r\n        return newData;\r\n      }\r\n    );\r\n\r\n    setRow(emptyRow);\r\n  }\r\n\r\n  return (\r\n    <tr>\r\n      <td/>\r\n      <TableFormData\r\n        obj={row}\r\n        property='name'\r\n        setObj={setRow}\r\n        placeholder='Type name...'\r\n      />\r\n      <TableFormData\r\n        obj={row}\r\n        property='type'\r\n        setObj={setRow}\r\n        placeholder='Type type...'\r\n      />\r\n      <TableFormData\r\n        obj={row}\r\n        property='color'\r\n        setObj={setRow}\r\n        placeholder='Type color...'\r\n      />\r\n      <td\r\n        onClick={handleInsertClick}\r\n        className='table-form-row__insert-cell'\r\n      >insert</td>\r\n    </tr>\r\n  );\r\n}","import TableInput from '../../../../components/table-input';\r\n\r\nimport { deepClone } from '../../../../functions';\r\n\r\nexport default function TableDataEditable({ obj, property, objIndex, setTableData }) {\r\n  const handeInputChange = event => {\r\n    setTableData(\r\n      oldData => {\r\n        const oldObj = oldData[objIndex];\r\n        const newValues = { [property]: event.target.value };\r\n        const newObj = {...oldObj, ...newValues};\r\n\r\n        const newData = deepClone(oldData);\r\n        newData.splice(objIndex, 1, newObj);\r\n\r\n        return newData;\r\n      }\r\n    );\r\n  }\r\n\r\n  return (\r\n    <TableInput\r\n      value={obj[property]}\r\n      handeInputChange={handeInputChange}\r\n    />\r\n  );\r\n}","import TableInput from '../../../../components/table-input';\r\n\r\nexport default function TableColorData({ rgb, color, setTableData, objIndex, modeIndex, setNewColorToTableData }) {\r\n  const handeInputChange = event => {\r\n    const newRgb = {\r\n      ...rgb,\r\n      ...{ [color]: event.target.value }\r\n    }\r\n    const newColorString = createColorString(newRgb);\r\n    setNewColorToTableData(newColorString);\r\n  }\r\n\r\n  return (\r\n    <TableInput\r\n      value={rgb[color]}\r\n      handeInputChange={handeInputChange}\r\n    />\r\n  );\r\n}\r\n\r\nfunction createColorString(rgb) {\r\n  if (rgb.modeIndex === 0)\r\n    return `#${formatHex(rgb.red)}${formatHex(rgb.green)}${formatHex(rgb.blue)}`;\r\n  else if (rgb.modeIndex === 1)\r\n    return `rgb(${rgb.red}, ${rgb.green}, ${rgb.blue})`;\r\n  else\r\n    return `srgb(${rgb.red}, ${rgb.green}, ${rgb.blue})`;\r\n}\r\n\r\nfunction formatHex(channel) {\r\n  let newChannel = channel;\r\n  if (channel.length === 0) newChannel = '  ' + newChannel;\r\n  if (channel.length === 1) newChannel = ' ' + newChannel;\r\n  if (channel.length > 2) newChannel = newChannel.slice(0, 2);\r\n  return newChannel;\r\n}","import React, { useState } from 'react';\r\n\r\nimport TableColorData from './components/table-color-data';\r\n\r\nimport { deepClone, rgbToHsl, hslToRgb, decToHex } from '../../functions';\r\n\r\nimport './color-picker.css';\r\n\r\nexport default function ColorPicker({ obj, objIndex, setTableData }) {\r\n  const [ isMenuActive, setIsMenuActive ] = useState(false);\r\n  let menuClasses = 'color-picker__menu';\r\n  let overlayClasses = 'color-picker__overlay';\r\n  if (isMenuActive) {\r\n    menuClasses += ' color-picker__menu--active';\r\n    overlayClasses += ' color-picker__overlay--active';\r\n  }\r\n\r\n  const [ isPickingColor, setIsPickingColor ] = useState(false);\r\n  const [ currentHue, setCurrentHue ] = useState(0);\r\n  let modeIndex = null;\r\n\r\n  const rgb = {};\r\n  const notConvertedRgb = {};\r\n  const colorString = obj.color;\r\n\r\n  if (colorString.indexOf('#') === 0 && colorString.length <= 7) {\r\n    modeIndex = 0;\r\n    notConvertedRgb.modeIndex = modeIndex;\r\n\r\n    notConvertedRgb.red = colorString.slice(1, 3).replace(/\\s/g, '');\r\n    notConvertedRgb.green = colorString.slice(3, 5).replace(/\\s/g, '');\r\n    notConvertedRgb.blue = colorString.slice(5, 7).replace(/\\s/g, '');\r\n\r\n    rgb.red = parseInt(!notConvertedRgb.red ? +notConvertedRgb.red : notConvertedRgb.red, 16);\r\n    rgb.green = parseInt(!notConvertedRgb.green ? +notConvertedRgb.green : notConvertedRgb.green, 16);\r\n    rgb.blue = parseInt(!notConvertedRgb.blue ? +notConvertedRgb.blue : notConvertedRgb.blue, 16);\r\n  }\r\n\r\n  if (colorString.indexOf('rgb(') === 0) {\r\n    modeIndex = 1;\r\n    notConvertedRgb.modeIndex = modeIndex;\r\n\r\n    let cuttedString = colorString.slice(4);\r\n    notConvertedRgb.red = cuttedString.slice(0, cuttedString.indexOf(',')).replace(/\\s/g, '');\r\n    \r\n    cuttedString = cuttedString.slice(cuttedString.indexOf(',') + 1);\r\n    notConvertedRgb.green = cuttedString.slice(0, cuttedString.indexOf(',')).replace(/\\s/g, '');\r\n    \r\n    cuttedString = cuttedString.slice(cuttedString.indexOf(',') + 1);\r\n    notConvertedRgb.blue = cuttedString.slice(0, cuttedString.indexOf(',')).replace(/\\s/g, '');\r\n\r\n    rgb.red = parseInt(!notConvertedRgb.red ? +notConvertedRgb.red : notConvertedRgb.red);\r\n    rgb.green = parseInt(!notConvertedRgb.green ? +notConvertedRgb.green : notConvertedRgb.green);\r\n    rgb.blue = parseInt(!notConvertedRgb.blue ? +notConvertedRgb.blue : notConvertedRgb.blue);\r\n  }\r\n\r\n  if (colorString.indexOf('srgb(') === 0) {\r\n    modeIndex = 2;\r\n    notConvertedRgb.modeIndex = modeIndex;\r\n\r\n    let cuttedString = colorString.slice(5);\r\n    notConvertedRgb.red = cuttedString.slice(0, cuttedString.indexOf(',')).replace(/\\s/g, '');\r\n    \r\n    cuttedString = cuttedString.slice(cuttedString.indexOf(',') + 1);\r\n    notConvertedRgb.green = cuttedString.slice(0, cuttedString.indexOf(',')).replace(/\\s/g, '');\r\n    \r\n    cuttedString = cuttedString.slice(cuttedString.indexOf(',') + 1);\r\n    notConvertedRgb.blue = cuttedString.slice(0, cuttedString.indexOf(',')).replace(/\\s/g, '');\r\n    \r\n    rgb.red = Math.floor( parseFloat(!notConvertedRgb.red ? +notConvertedRgb.red : notConvertedRgb.red) * 255 );\r\n    rgb.green = Math.floor( parseFloat(!notConvertedRgb.green ? +notConvertedRgb.green : notConvertedRgb.green) * 255 );\r\n    rgb.blue = Math.floor( parseFloat(!notConvertedRgb.blue ? +notConvertedRgb.blue : notConvertedRgb.blue) * 255 );\r\n  }\r\n\r\n  const stringValidation =\r\n    (\r\n      modeIndex !== null &&\r\n      rgb.red >= 0 && rgb.red <= 255 && !isNaN(rgb.red) &&\r\n      rgb.green >= 0 && rgb.green <= 255 && !isNaN(rgb.green) &&\r\n      rgb.blue >= 0 && rgb.blue <= 255 && !isNaN(rgb.blue)\r\n    ) ? true : false\r\n  ;\r\n\r\n  if (!stringValidation) {\r\n    modeIndex = 1;\r\n    Object.assign(rgb, {red: 255, green: 0, blue: 0})\r\n    Object.assign(notConvertedRgb, rgb, { modeIndex: modeIndex });\r\n  }\r\n\r\n  const hsl = rgbToHsl(rgb, currentHue);\r\n\r\n  const pickStyle = \r\n    stringValidation ? \r\n      { \r\n        backgroundColor: createColorString(rgb) \r\n      } \r\n    : null\r\n  ;\r\n\r\n  const pointerStyle = {\r\n    left: `${hsl.saturation}%`,\r\n    top: `${-(hsl.lightness + hsl.saturation / 2 - 100) / (1 - hsl.saturation / 200)}%`,\r\n  };\r\n\r\n  const fieldSaturationStyle = {\r\n    background:  createSaturationGradientByHsl(hsl)\r\n  };\r\n\r\n  const setNewColorToTableData = newColorString => {\r\n    setTableData(\r\n      oldData => {\r\n        const oldObj = oldData[objIndex];\r\n        \r\n        const newValues = { color: newColorString };\r\n        const newObj = {...oldObj, ...newValues};\r\n  \r\n        const newData = deepClone(oldData);\r\n        newData.splice(objIndex, 1, newObj);\r\n  \r\n        return newData;\r\n      }\r\n    );\r\n  }\r\n\r\n  const handleRangeChange = event => {\r\n    const newHue = +event.target.value;\r\n    \r\n    setCurrentHue(newHue);\r\n    const newHsl = {\r\n      ...hsl,\r\n      ...{ hue: newHue }\r\n    };\r\n\r\n    const newRgb = hslToRgb(newHsl);\r\n    const newColorString = createColorString(newRgb, modeIndex);\r\n    setNewColorToTableData(newColorString);\r\n  };\r\n\r\n  const setPickedColor = event => {\r\n    const newSaturation = event.nativeEvent.offsetX / event.target.offsetWidth * 100;\r\n    const newLightness = (50 + (1 - event.nativeEvent.offsetX / event.target.offsetWidth) * 50) * (1 - event.nativeEvent.offsetY / event.target.offsetHeight);\r\n  \r\n    const newHsl = {\r\n      hue: hsl.hue,\r\n      saturation: newSaturation,\r\n      lightness: newLightness,\r\n    };\r\n  \r\n    const newRgb = hslToRgb(newHsl);\r\n    const newColorString = createColorString(newRgb, modeIndex);\r\n    setNewColorToTableData(newColorString);\r\n  }\r\n\r\n  const handleFieldMouseDown = event => {\r\n    setIsPickingColor(true);\r\n    setPickedColor(event);\r\n  }\r\n\r\n  const handleFieldMouseMove = event => {\r\n    if (isPickingColor) setPickedColor(event);\r\n  }\r\n\r\n  const handleFieldStopPicking = event => {\r\n    setIsPickingColor(false);\r\n  }\r\n\r\n  const handleModeClick = () => {\r\n    const newModeIndex = modeIndex < modes.length - 1 ? (modeIndex + 1) : 0;\r\n    const newColorString = createColorString(rgb, newModeIndex);\r\n    setNewColorToTableData(newColorString);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div \r\n        className={overlayClasses}\r\n        onClick={() => setIsMenuActive(false)}\r\n      />\r\n      <div className='color-picker'>\r\n        <button \r\n          className='color-picker__pick'\r\n          style={pickStyle}\r\n          onClick={() => setIsMenuActive(true)}\r\n        />\r\n        <div className={menuClasses}>\r\n          <div \r\n            className='color-picker__field-saturation'\r\n            style={fieldSaturationStyle}\r\n            onMouseDown={handleFieldMouseDown}\r\n            onMouseMove={handleFieldMouseMove}\r\n            onMouseUp={handleFieldStopPicking}\r\n            onMouseLeave={handleFieldStopPicking}\r\n          >\r\n            <div\r\n              className='color-picker__field-lightness'\r\n            />\r\n            <div \r\n              className='color-picker__pointer'\r\n              style={pointerStyle}\r\n            />\r\n          </div>\r\n          <input \r\n            className='color-picker__hue-range'\r\n            type='range' \r\n            min='0'\r\n            max='359'\r\n            step='any'\r\n            onChange={handleRangeChange}\r\n            value={hsl.hue}\r\n          />\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <td>\r\n                  R\r\n                </td>\r\n                <td>\r\n                  G\r\n                </td>\r\n                <td>\r\n                  B\r\n                </td>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <TableColorData\r\n                  rgb={notConvertedRgb}\r\n                  color='red'\r\n                  setTableData={setTableData}\r\n                  objIndex={objIndex}\r\n                  modeIndex={modeIndex}\r\n                  setNewColorToTableData={setNewColorToTableData}\r\n                />\r\n                <TableColorData\r\n                  rgb={notConvertedRgb}\r\n                  color='green'\r\n                  setTableData={setTableData}\r\n                  objIndex={objIndex}\r\n                  modeIndex={modeIndex}\r\n                  setNewColorToTableData={setNewColorToTableData}\r\n                />\r\n                <TableColorData\r\n                  rgb={notConvertedRgb}\r\n                  color='blue'\r\n                  setTableData={setTableData}\r\n                  objIndex={objIndex}\r\n                  modeIndex={modeIndex}\r\n                  setNewColorToTableData={setNewColorToTableData}\r\n                />\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n          <button\r\n            className='color-picker__mode'\r\n            onClick={handleModeClick}\r\n            type='button'\r\n          >\r\n            {modes[modeIndex]}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nconst modes = ['Hex', 'RGB', 'sRGB'];\r\n\r\nfunction createSaturationGradientByHsl(hsl) {\r\n  const newHsl = {\r\n    ...hsl,\r\n    ...{\r\n      saturation: 100,\r\n      lightness: 50\r\n    }\r\n  };\r\n\r\n  return `linear-gradient(to right, #ffffff, ${createColorString(hslToRgb(newHsl))})`;\r\n}\r\n\r\nfunction createColorString(rgb, modeIndex = 0) {\r\n  if (modeIndex === 0)\r\n    return `#${decToHex(rgb.red)}${decToHex(rgb.green)}${decToHex(rgb.blue)}`;\r\n  else if (modeIndex === 1)\r\n    return `rgb(${rgb.red}, ${rgb.green}, ${rgb.blue})`;\r\n  else\r\n    return `srgb(${(rgb.red / 255).toFixed(3)}, ${(rgb.green / 255).toFixed(3)}, ${(rgb.blue / 255).toFixed(3)})`;\r\n}","import { useRef, useState } from 'react';\r\n\r\nimport TableDataEditable from '../../components/table-data-editable';\r\nimport ColorPicker from '../../../color-picker';\r\n\r\nimport { deepClone } from '../../../../functions';\r\n\r\nimport './table-row.css';\r\n\r\nexport default function TableRow({ row, index, setTableData, draggedIndex, setDraggedIndex }) {\r\n  const [ isDraggedOver, setIsDraggedOver ] = useState(false);\r\n  const parrentOfDraggedEl = useRef(null);\r\n\r\n  let tableRowClasses = 'table-row';\r\n  tableRowClasses += ( index === draggedIndex ) ? ' table-row--dragged' : '';\r\n  tableRowClasses += \r\n    isDraggedOver ?\r\n      (\r\n        ( index < draggedIndex ) ?\r\n          ' table-row--dragged-over-top' \r\n        :\r\n          ' table-row--dragged-over-bottom' \r\n      )\r\n    : ''\r\n  ;\r\n\r\n  const handleDragStart = event => {\r\n    setDraggedIndex(index);\r\n\r\n    event.dataTransfer.setDragImage(\r\n      document.createElement('div'),\r\n      0,\r\n      0\r\n    );\r\n  };\r\n\r\n  const handleDragEnd = event => {\r\n    setDraggedIndex(null);\r\n  };\r\n\r\n  const handleDragOver = event => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = 'move';\r\n\r\n    if (index !== draggedIndex) setIsDraggedOver(true);\r\n  };\r\n\r\n  const handleDragLeave = event => {\r\n    if (index !== draggedIndex) setIsDraggedOver(false);\r\n  }\r\n\r\n  const handleDrop = event => {\r\n    setIsDraggedOver(false);\r\n\r\n    if (index !== draggedIndex) setTableData(\r\n      prevTableData => {\r\n        const newTableData = deepClone(prevTableData);\r\n        newTableData.splice(index, 0, newTableData.splice(draggedIndex, 1)[0]);\r\n\r\n        return newTableData;\r\n      }\r\n    )\r\n  };\r\n  \r\n  const handleDeleteClick = () => {\r\n    setTableData(\r\n      oldData => {\r\n        const newData = deepClone(oldData);\r\n        newData.splice(index, 1);\r\n\r\n        return newData;\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <tr \r\n      className={tableRowClasses}\r\n      ref={parrentOfDraggedEl}\r\n    >\r\n      <td \r\n        className='table-row__drag-cell'\r\n        draggable\r\n        onDragStart={handleDragStart}\r\n        onDragEnd={handleDragEnd}\r\n        onDragOver={handleDragOver}\r\n        onDragLeave={handleDragLeave}\r\n        onDrop={handleDrop}\r\n      >drag</td>\r\n      <TableDataEditable\r\n        obj={row}\r\n        property='name'\r\n        objIndex={index}\r\n        setTableData={setTableData}\r\n      />\r\n      <TableDataEditable\r\n        obj={row}\r\n        property='type'\r\n        objIndex={index}\r\n        setTableData={setTableData}\r\n      />\r\n      <TableDataEditable\r\n        obj={row}\r\n        property='color'\r\n        objIndex={index}\r\n        setTableData={setTableData}\r\n      />\r\n      <td>\r\n        <ColorPicker\r\n          obj={row}\r\n          objIndex={index}\r\n          setTableData={setTableData}\r\n        />\r\n      </td>\r\n      <td\r\n        onClick={handleDeleteClick}\r\n        className='table-row__delete-cell'\r\n      >delete</td>\r\n    </tr>\r\n  );\r\n}","import { useState } from 'react';\r\n\r\nimport TableFormRow from './containers/table-form-row';\r\nimport TableRow from './containers/table-row';\r\n\r\nimport './table-editor.css';\r\n\r\nexport default function TableEditor({tableData, setTableData}) {\r\n  const [ draggedIndex, setDraggedIndex ] = useState(null);\r\n\r\n  return (\r\n    <table className='table-editor'>\r\n      <thead>\r\n        <tr>\r\n          <td/>\r\n          <td>\r\n            Name\r\n          </td>\r\n          <td>\r\n            Type\r\n          </td>\r\n          <td>\r\n            Color\r\n          </td>\r\n          <td/>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <TableFormRow setTableData={setTableData}/>\r\n        {tableData ? tableData.map(\r\n          (row, index) => (\r\n            <TableRow\r\n              key={index}\r\n              row={row}\r\n              index={index}\r\n              setTableData={setTableData}\r\n              draggedIndex={draggedIndex}\r\n              setDraggedIndex={setDraggedIndex}\r\n            />\r\n          )\r\n        ) : null}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}","export const DEFAULT_TABLE_DATA = [\r\n  {\r\n    name: 'name1',\r\n    type: 'main',\r\n    color: '#f4f4f4',\r\n  },\r\n  {\r\n    name: 'name2',\r\n    type: 'side',\r\n    color: '#f8f8f8',\r\n  },\r\n]\r\n\r\nexport const LOCAL_STORAGE_KEY = 'tableData'","import React, { useEffect, useState } from 'react';\r\n\r\nimport TableEditor from '../table-editor';\r\n\r\nimport { deepClone } from '../../functions';\r\nimport { DEFAULT_TABLE_DATA, LOCAL_STORAGE_KEY } from '../../data';\r\n\r\nimport './app.css';\r\n\r\nexport default function App() {\r\n  const [ tableData, setTableData ] = useState(JSON.parse(window.localStorage.getItem(LOCAL_STORAGE_KEY)));\r\n\r\n  //Update local storage\r\n  useEffect(\r\n    () => {\r\n      window.localStorage.setItem(\r\n        LOCAL_STORAGE_KEY,\r\n        JSON.stringify(tableData)\r\n      );\r\n    },\r\n    [tableData]\r\n  );\r\n\r\n  const setDefaultTableData = () => {\r\n    setTableData(deepClone(DEFAULT_TABLE_DATA));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <button type='button' onClick={setDefaultTableData}>\r\n        Set default table data\r\n      </button>\r\n      <TableEditor\r\n        tableData={tableData}\r\n        setTableData={setTableData}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './containers/app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}